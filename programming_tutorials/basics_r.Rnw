% this is a tutorial on the basics of programming.
% it uses the R language because this is used most 
% frequently in the statistics world.
% most of the advice given here is language agnostic.
% material here is based on lessons learned from 
% Think Python by Allen B Downey
% Structure and Interpretation of Computer Programs by Abelson and Sussman
% The Art of R Programming by Norman Matloff
% (upcoming/unpublished) Advanced R development: making reusable code 
%   by Hadley Wickham and the devtools dev team
%
% Gene Hunt's tutorials have also served as a model template
%   especially given that I learned the basics from him
%
% 

\documentclass{beamer}
\usepackage{graphicx, parskip, microtype, hyperref, caption}
\usepackage{amsmath, amsthm}

\frenchspacing

\usetheme{default}
\usecolortheme{orchid}

<<opts-set, message = FALSE, echo = FALSE>>=
require(knitr)
options(width = 60)
opts_chunk$set(echo = TRUE, highlight = TRUE, results = 'markup',
               size = 'small')
@

\title{Introduction to Programming: the R perspective}
\author{Peter D Smits}

\begin{document}

\begin{frame}
  \maketitle
\end{frame}

\section{Introduction}
\begin{frame}
  \frametitle{What is programming?}

  \begin{center}
    \includegraphics[height = 0.9\textheight, keepaspectratio = true]{figure/sicp}
  \end{center}

\end{frame}

\begin{frame}
  \frametitle{What is programming?}
  \textit{Structure of Interpretation of Computer Programs} by Abelson and Sussman 1996 page 1.

  \begin{quotation}
    We are about the study the idea of a \textit{computational process}. Computational processes are abstract beings that inhabit computers. As they evolve, processes maniputate other acstract things called \textit{data}. The evoution of a process is directed by a pattern of rules called a \textit{program}. People create programs to direct processes. In effect, we conjure the spirits of the computer with our spells.
  \end{quotation}

  Continued\ldots
\end{frame}

\begin{frame}
  \frametitle{What is programming?}
  \begin{quotation}
    A computation process is indeed much like a sorcerer's idea of a spirit. It cannot be seen or touched. It is not composed of matter at all. However, it is very real. It can perform intellectual work. It can answer questions. It can affect the world by disbursing money at a bank or by controlling a robot arm in a factory. The programs we use to conjure processes are like a sorcerer's spells. They are carefully composed from symbolic epressions in arcane and esoteric \textit{programming languages} that prescribe the tasks we want our process to perform.
  \end{quotation}
\end{frame}

\begin{frame}
  \frametitle{R: a brief history}
  R is a programming language based on the S language.

  Originally written by Ross Ihaka and Robert Gentleman, now by a team.

  \begin{figure}[h]
    \captionsetup{justification = raggedleft, slc = off}
    \includegraphics[width = \textwidth, keepaspectratio = true]{figure/ihaka_gentleman}
    \caption*{NyTimes}
    \label{fig:creators}
  \end{figure}

\end{frame}

\begin{frame}
  \frametitle{R: a brief history}
  Existed in a usable form since approximately 1997.

  R is kind of a messy language and pretty slow. Lots of other problems/concerns.

  Main advantages of R for statistical analysis
  \begin{itemize}
    \item designed with data in mind
    \item huge package universe
    \item lots of online resources
    \item graphics
    \item dynamic documents
  \end{itemize}

\end{frame}

\begin{frame}
  \frametitle{Console and scripts}
  The console (or REPL) is the R command line. It is the blinking cursor you stare at when you first open R. It is useful for testing bits of code and hunting for bugs in your code.

  Script files are text times with a series of commands/expessions in a row. These are then run to perform analysis. Scripts allow you to edit code and save it for later use. Write scripts, don't just use the console. These are plain text files with specific extensions. ``.r'' or ``.R'' in the case of R.

\end{frame}

\begin{frame}
  \frametitle{RStudio}
  \includegraphics[height = 0.8\textheight, keepaspectratio = true]{figure/rstudio}
  % at this point it is appropriate to open up RStudio and demonstrate things

\end{frame}

\section{Programming}
\begin{frame}[fragile]
  \frametitle{Using the console or REPL}

  Type straight into the console.

<<>>=
1

x <- 1

x + 1

y <- x + x

y
@

\end{frame}

\begin{frame}[fragile]
  \frametitle{Using the console or REPL}

  You can scroll up/down using the arrow keys.

  Useful functions. Give them a try.
<<eval = FALSE>>=
ls()

sessionInfo()
@
\end{frame}

\begin{frame}[fragile]
  \frametitle{Hold on. What did we just do?}
<<eval = FALSE>>=
<-
@
  This is called an assignment. ``Binds'' a value to a variable/object so it can be called later. It can be lots of things, but lets stick with numerics (numbers) and strings (characters). Strings are in quotes.

<<>>=
a <- 1
a

b <- 'hello'
b
@

  Play around with this. Try different variable names. Some aren't valid. You can even bind a variable to a variable like we did earlier.

\end{frame}

\begin{frame}[fragile]
  \frametitle{Syntax}

  Syntactic rules are those which govern the order of words. In programming, this means the way we have to write out our statements. The way we assign a variable is a type of syntactic rule.

  In R, assignments are flexible which should be concerning.

<<tidy = FALSE>>=
x <- 1
y = 1
1 -> z
@

  Which one should we use? I like the first. No one likes the third and you should probably never use it. Whatever you chose, stick to it.

\end{frame}


\begin{frame}[fragile]
  \frametitle{Writing our first script}
  Write the following code in a script file.

<<>>=

@

\end{frame}

\begin{frame}[fragile]
  \frametitle{Comments}

  Comments are unevaluated text that we can include in a script file. Useful for notes and reminders.

  In R, comments are proceeded by a \# symbol. Here is an awful example.

<<>>=
x <- 1  # i've made x the value 1
@

  Comments are so that other people who are looking at your code can more quickly understand what is going on. Remember, you in 6 months counts as a different person. In CS classes, you get points off for poor commenting.

  Comments should explain the why, not the what.
  
  Always comment your code. 

\end{frame}

\begin{frame}
  \frametitle{Flow control}
  Flow control is how you tell the computer what order to do things in.

  Use TRUE/FALSE (Boolean) statements.

\end{frame}

\begin{frame}[fragile]
  \frametitle{Basics of conditional statements}
  Think about what these statements will do then try then in the console.

<<eval = FALSE>>=
TRUE == TRUE

TRUE == FALSE

FALSE != TRUE

2 > 1

2 < 1

is.numeric(1)

@

\end{frame}

\begin{frame}[fragile]
  \frametitle{\tt{if} statements}
<<eval = FALSE>>=
if(x = TRUE) {
  print(x)
}

if(x = TRUE) {
  print('yay')
} else {
  print('boo')
}

if(x = TRUE) {
  print('yay')
} else if(x = FALSE) {
  print('what?')
} else {
  print('why?')
}

@

\end{frame}

\begin{frame}[fragile]
  \frametitle{\tt{while} statements}
<<eval = FALSE>>=
while(y < 100) {
  y <- y + 1
}

while(y < 100) {
  if(y < 0) {
    break
  }
  y <- y + 1
}
@

  CAUTION: \tt{while} loops can be infinite\dots

\end{frame}

\begin{frame}[fragile]
  \frametitle{\tt{for} statements}
<<eval = FALSE>>=
# i write these a little weird so they are clearer and safer

for(ii in seq(10)) {
  print(ii)
}

@

\end{frame}

\begin{frame}
  \frametitle{Writing our first function}
  Using what we know now, let's write our own useful function.

  Let's duplicate the sum function.

\end{frame}

\begin{frame}[fragile]
  \frametitle{Writing our first function}

  First, let's find out what sum does.

<<>>=
x <- seq(5)
sum(x)

y <- c(1, 1)
sum(y)
@

\end{frame}

\begin{frame}[fragile]
  \frametitle{Writing our first function}

<<sum, tidy = FALSE>>=
my.sum <- function(x) {
  y <- 0  # storage

  # add every value of x to y
  for(i in seq(length(x))) {  
    # seq is for making sequences 
    # length determines how long a vector is
    
    y <- y + x[i]
  }

  # return determines the output of a function
  return(y)
}

@

\end{frame}

\begin{frame}
  \frametitle{Next time}

  Basic programming concept
  \begin{itemize}
    \item types
    \item classes
    \item objects
    \item functions
  \end{itemize}

\end{frame}

\end{document}
